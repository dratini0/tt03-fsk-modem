/* Generated by Yosys 0.23 (git sha1 7ce5011c24b) */

module dratini0_fsk_modem_top(io_out, io_in);
  reg \$auto$verilog_backend.cc:2083:dump_module$1  = 0;
  wire [8:0] \$1 ;
  wire [8:0] \$10 ;
  wire [8:0] \$11 ;
  wire [15:0] \$13 ;
  wire [15:0] \$15 ;
  wire \$17 ;
  wire [8:0] \$2 ;
  wire [8:0] \$4 ;
  wire [8:0] \$5 ;
  wire [8:0] \$7 ;
  wire [8:0] \$8 ;
  reg [7:0] _counter1 = 8'h00;
  reg [7:0] \_counter1$next ;
  reg [7:0] _counter2 = 8'h00;
  reg [7:0] \_counter2$next ;
  reg [7:0] _counter3 = 8'h00;
  reg [7:0] \_counter3$next ;
  reg [7:0] _counter4 = 8'h00;
  reg [7:0] \_counter4$next ;
  wire clk;
  input [7:0] io_in;
  wire [7:0] io_in;
  output [7:0] io_out;
  wire [7:0] io_out;
  wire rst;
  assign \$11  = $signed(_counter4) + $signed(8'h11);
  assign \$13  = $signed(_counter1) * $signed(_counter2);
  assign \$15  = $signed(_counter3) * $signed(_counter4);
  assign \$17  = $signed(\$13 ) > $signed(\$15 );
  always @(posedge clk)
    _counter1 <= \_counter1$next ;
  always @(posedge clk)
    _counter2 <= \_counter2$next ;
  always @(posedge clk)
    _counter3 <= \_counter3$next ;
  always @(posedge clk)
    _counter4 <= \_counter4$next ;
  assign \$2  = $signed(_counter1) + $signed(8'h07);
  assign \$5  = $signed(_counter2) + $signed(8'h0b);
  assign \$8  = $signed(_counter3) + $signed(8'h0d);
  always @* begin
    if (\$auto$verilog_backend.cc:2083:dump_module$1 ) begin end
    \_counter1$next  = \$2 [7:0];
    casez (rst)
      1'h1:
          \_counter1$next  = 8'h00;
    endcase
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2083:dump_module$1 ) begin end
    \_counter2$next  = \$5 [7:0];
    casez (rst)
      1'h1:
          \_counter2$next  = 8'h00;
    endcase
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2083:dump_module$1 ) begin end
    \_counter3$next  = \$8 [7:0];
    casez (rst)
      1'h1:
          \_counter3$next  = 8'h00;
    endcase
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2083:dump_module$1 ) begin end
    \_counter4$next  = \$11 [7:0];
    casez (rst)
      1'h1:
          \_counter4$next  = 8'h00;
    endcase
  end
  assign \$1  = \$2 ;
  assign \$4  = \$5 ;
  assign \$7  = \$8 ;
  assign \$10  = \$11 ;
  assign io_out[0] = \$17 ;
  assign io_out[7:1] = 7'h00;
  assign rst = io_in[1];
  assign clk = io_in[0];
endmodule

